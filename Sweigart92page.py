# Ответы на контрольные вопросы по главе №2


# 1. Каковы два возможных занчения данных булева типа? Как они записываются?

print('в упражнении 1.1 выражение ' + '"2 != 3"' + ' приводит к результату: ' + str(2 != 3))  # Логический, или булев, тип данных может
# принимать только два значения: True (истина) и False (ложь).

spam = True  # При использовании в коде Python булевы значения не заключаются в кавычки и всегда начинаются с
# большой буквы T или F. Как и любые другие значения, булевы значения могут входить в выражения и
# сохраняться в переменных.
print('в упражнении 1.2 переменная содержит булево значение - ' + str(spam))


# 2. Назовите три булевых оператора. Для сравнения булевых значений используются три булева оператора: and, or и not.


# 3. Напишите таблицы истинности (то есть запишите результаты для всех возможных комбинаций оператора и двух булевых
# значений) для каждого из булевых оперторов.

print('True and True равно True: ' + str(True and True))  # Булев оператор and вычисляет булево
# выражение, сводя его к единственному булеву значению. Означает логическое И и всегда работает с двумя булевыми
# значениями (или выражениями), и поэтому его называют бинарным.

print('True and False равно False: ' + str(True and False))  # Оператор and возвращает значение
# True только в том случае, если одновременно оба булева значения равны True; в противном случае результат равен False.

print('False and True равно False: ' + str(False and True))

print('False and False равно False: ' + str(False and False))


print('True or True равно True: ' + str(True or True))  # Оператор or - логическое
# ИЛИ, является бинарным оператором. Возвращает значение True в случае, если в выражении хотя бы одно булево значение
# равно True.

print('True or False равно True: ' + str(True or False))

print('False or True равно True: ' + str(False or True))

print('False or False равно False: ' + str(False or False))


print('not True равно False: ' + str(not True))  # Оператор not, в отличие от операторов and и or, воздействует
# только на одно булево значение (выражение) и поэтому является унарным. Оператор обращает булево значение в его
# противоположность.

print('not False равно True: ' + str(not False))


# 4.1 Каковы результаты вычисления приведенных ниже выражений?

print('в упражнении 4.1 выведем True - ' + str((5 > 4) and (3 == 3.0)))

print('в упражнении 4.2 выведем False - ' + str((True != False) and (42 == '42')))

print('в упр. 4.3 рассчитаем выражение "5 > 4" и обратим булево значение в противоположность - ' + str(not (5 > 4)))

print('в упр. 4.4 есть хотя бы одно True, поэтому выводим - ' + str((5 > 4) or (3 == 5)))

print(not ((5 > 4) or (3 == 5)))

print((True and True) and (True == False))

print((not False) or (not True))

# 5. Назовите шесть операторов сравнения.

print(3 == 3.0)

print(2 != 5)

print(1 < 6)

print(7 > 10)

print(4 <= 8)

print(8 >= 3)

# Идентифицируйте три блока в приведенном ниже коде.

spam = 0
if spam == 10:
    print('eggs')  # Строки кода Python могут группировать в блоки. Признаком начала блока служив увеличение отступа.
    if spam > 5:
        print('bacon')  # Блок может содержать другие блоки.
    else:  # Признак конца блока - уменьшение отступа до нулевой велчины или до величины отступа содержащего блока.
        print('ham')  # Третий блок
    print('spam')
print('spam')

print('Введите значение')
score = input()
score = int(score)
if score == 1:
    print('Hello')
elif score == 2:
    print('Howdy')
else:
    print('Greetings!')
